#!/usr/bin/env node

const winston = require("winston");
const { combine, timestamp, label, printf } = winston.format;

// ------------ set logger -----------
const loggerFormat = printf(info => {
    return `${info.timestamp} [${info.level}]: ${info.message}`;
});

const logger = winston.createLogger({
    level: "info",
    transports: [
        new winston.transports.File({
            filename: "/var/log/nodejs-wsd/nodejs.log",
            handleExceptions: true,
            humanReadableUnhandledException: true,
            json: false
        })
    ],
    format: combine(timestamp(), loggerFormat)
});

// ------------------- open websocket -------------------
const WebSocket = require("ws");

const wss = new WebSocket.Server({ port: 8080 });

const clock = require("./clock/clock.js");
wss.on("connection", function connection(ws, req) {
    logger.info("opened connection to " + String(req.headers["x-forwarded-for"] || req.connection.remoteAddress));
    //handle receiving a message
    ws.on("message", function incoming(message) {
        logger.info("received message from " + String(req.headers["x-forwarded-for"] || req.connection.remoteAddress));
        sendAll(message);
        clock.parseMessage(message);
    });
    //handle errors
    ws.on("error", error => {
        logger.error(String(error));
    });
    var transmit = {
        method: clock.getCurrentMethod()
    };
    if (transmit.method === "displayText") {
        transmit.text = clock.getCurrentContent();
        transmit.custom_css = clock.getCurrentCustomCSS();
    } else {
        transmit.start = clock.getCurrentContent();
    }
    ws.send(JSON.stringify(transmit));
});

function sendAll(data) {
    wss.clients.forEach(function each(client) {
        if (client.readyState === WebSocket.OPEN) {
            client.send(data);
        }
    });
}

// vim: set ft=javascript:
